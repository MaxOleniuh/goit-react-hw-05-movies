{"version":3,"file":"static/js/186.ed6ec6b1.chunk.js","mappings":"wOA2CA,UAtCgB,WACZ,OAAwCA,EAAAA,EAAAA,UAAS,CAAEC,QAAS,KAA5D,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BH,EAAAA,EAAAA,WAAS,GAArC,eAAOI,EAAP,KAAeC,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAgBR,OAfAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,mCAAG,2FACrBJ,GAAU,GADW,mBAGCK,EAAAA,EAAAA,IAAqBJ,GAHtB,OAGZK,EAHY,OAIlBR,EAAgBQ,GAJE,gDAMlBC,QAAQC,IAAI,6BAAZ,MANkB,yBASlBR,GAAU,GATQ,4EAAH,qDAYvBI,GACH,GAAE,CAACH,KAEA,gCACKF,IAAU,SAAC,IAAD,IACVF,EAAaY,QAAU,GACpB,wBACKZ,EAAaY,QAAQC,KAAI,SAAAC,GAAM,OAC5B,2BACI,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAFNF,EAAOV,GADY,OAQpC,0DAKf,C,mMCzCDa,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAsB,mCAAG,6GAEXF,EAAAA,EAAAA,IAAU,oBAAqB,CACpDG,OAAQ,CACNC,QAASH,KAJqB,cAE5BI,EAF4B,yBAO3BA,EAASb,KAAKG,SAPa,gCASlCF,QAAQC,IAAR,MATkC,yDAAH,qDAatBY,EAAiB,mCAAG,WAAMC,GAAN,gGAENP,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,EACTM,MAAOA,KALkB,cAEvBF,EAFuB,yBAQtBA,EAASb,KAAKG,SARQ,gCAU7BF,QAAQC,IAAR,MAV6B,yDAAH,sDAcjBc,EAAoB,mCAAG,WAAMrB,GAAN,gGAETa,EAAAA,EAAAA,IAAA,iBAAoBb,GAAM,CAC/CgB,OAAQ,CACNC,QAASH,KAJmB,cAE1BI,EAF0B,yBAOzBA,EAASb,MAPgB,gCAShCC,QAAQC,IAAR,MATgC,yDAAH,sDAapBe,EAAiB,mCAAG,WAAMtB,GAAN,gGAENa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,YAAkC,CACvDgB,OAAQ,CACNC,QAASH,KAJgB,cAEvBI,EAFuB,yBAOtBA,EAASb,MAPa,gCAS7BC,QAAQC,IAAR,MAT6B,yDAAH,sDAajBH,EAAoB,mCAAG,WAAMJ,GAAN,gGAETa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,YAAkC,CACvDgB,OAAQ,CACNC,QAASH,KAJmB,cAE1BI,EAF0B,yBAOzBA,EAASb,MAPgB,gCAShCC,QAAQC,IAAR,MATgC,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","services/moviesApi.js"],"sourcesContent":["import { Loader } from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieReviewsApi } from \"services/moviesApi\";\n\nconst Reviews = () => {\n    const [movieReviews, setMovieReviews] = useState({ reviews: [] });\n    const [loader, setLoader] = useState(false);\n    const { id } = useParams();\n    useEffect(() => {\n        const fetchMovieReviews = async () => {\n             setLoader(true);\n            try {\n                const data = await fetchMovieReviewsApi(id);\n                setMovieReviews(data);\n            } catch (error) {\n                console.log('Error fetching movie cast:', error);\n            }\n            finally {\n                setLoader(false)\n            }\n        };\n        fetchMovieReviews();\n    }, [id]);\n    return (\n        <>\n            {loader && <Loader/>}\n            {movieReviews.results > 0 ? (\n                <ul>\n                    {movieReviews.results.map(review => (\n                        <li key={review.id}>\n                            <h2>Author:{review.author}</h2>\n                            <p>{review.content}</p>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>No reviews for this movie...</p>\n            )}\n        </>\n       \n    )\n}\nexport default Reviews;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0899cb23c3aa3793d7d2c78c362ea8dc';\n\nexport const fetchTrendingMoviesApi = async () => {\n  try {\n    const response = await axios.get('/trending/all/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchKeyMoviesApi = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetailsApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCastApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviewsApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["useState","reviews","movieReviews","setMovieReviews","loader","setLoader","id","useParams","useEffect","fetchMovieReviews","fetchMovieReviewsApi","data","console","log","results","map","review","author","content","axios","API_KEY","fetchTrendingMoviesApi","params","api_key","response","fetchKeyMoviesApi","query","fetchMovieDetailsApi","fetchMovieCastApi"],"sourceRoot":""}