{"version":3,"file":"static/js/257.d1f59cd8.chunk.js","mappings":"kRAEaA,E,QAAcC,EAAAA,IAAH,+D,mBCuDxB,EAnDqB,WACjB,IAAMC,GAAWC,EAAAA,EAAAA,MAIjB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACE,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACIC,GAAOC,EAAAA,EAAAA,MAAPD,IACNE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACxBJ,GAAU,GADc,mBAGHK,EAAAA,EAAAA,IAAqBJ,GAHlB,OAGhBK,EAHgB,OAItBR,EAAgBQ,GAJM,gDAMtBC,QAAQC,IAAI,gCAAZ,MANsB,yBAStBR,GAAU,GATY,4EAAH,qDAYzBI,GACC,GAAE,CAACH,IAGN,IAAMQ,EAAM,0CAAsCZ,EAAaa,aAC7D,OACI,2BACKX,IAAU,SAACY,EAAA,EAAD,KACnB,4BACE,mBAAQC,QA5BQ,WAClBlB,EAAS,UAAW,CAAEmB,MAAO,CAAEC,MAAO,KACvC,EA0BG,sBACA,4BACE,SAACtB,EAAD,CAAauB,IAAKN,EAAQO,IAAKnB,EAAaoB,WAE9C,wBAAKpB,EAAaoB,SAClB,yCAAiBC,KAAKC,MAAgC,GAA1BtB,EAAauB,cAAzC,QACA,sCACA,uBAAIvB,EAAawB,YACjB,mCAAiBxB,EAAayB,QAAUzB,EAAayB,OAAOC,KAAI,SAAAC,GAAK,OAAI,uBAAmBA,EAAMC,MAAjBD,EAAMvB,GAAlB,MAT7DA,IAWF,4BACI,oDACA,2BACI,yBAAI,SAAC,KAAD,CAAMyB,GAAG,OAAT,qBACJ,yBAAI,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAEJ,SAAC,KAAD,SAInB,C,mMCvDDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAsB,mCAAG,6GAEXF,EAAAA,EAAAA,IAAU,oBAAqB,CACpDG,OAAQ,CACNC,QAASH,KAJqB,cAE5BI,EAF4B,yBAO3BA,EAAS1B,KAAK2B,SAPa,gCASlC1B,QAAQC,IAAR,MATkC,yDAAH,qDAatB0B,EAAiB,mCAAG,WAAMpB,GAAN,gGAENa,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,EACTd,MAAOA,KALkB,cAEvBkB,EAFuB,yBAQtBA,EAAS1B,KAAK2B,SARQ,gCAU7B1B,QAAQC,IAAR,MAV6B,yDAAH,sDAcjBH,EAAoB,mCAAG,WAAMJ,GAAN,gGAET0B,EAAAA,EAAAA,IAAA,iBAAoB1B,GAAM,CAC/C6B,OAAQ,CACNC,QAASH,KAJmB,cAE1BI,EAF0B,yBAOzBA,EAAS1B,MAPgB,gCAShCC,QAAQC,IAAR,MATgC,yDAAH,sDAapB2B,EAAiB,mCAAG,WAAMlC,GAAN,gGAEN0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,YAAkC,CACvD6B,OAAQ,CACNC,QAASH,KAJgB,cAEvBI,EAFuB,yBAOtBA,EAAS1B,MAPa,gCAS7BC,QAAQC,IAAR,MAT6B,yDAAH,sDAajB4B,EAAoB,mCAAG,WAAMnC,GAAN,gGAET0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,YAAkC,CACvD6B,OAAQ,CACNC,QAASH,KAJmB,cAE1BI,EAF0B,yBAOzBA,EAAS1B,MAPgB,gCAShCC,QAAQC,IAAR,MATgC,yDAAH,qD","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/moviesApi.js"],"sourcesContent":["import s from \"@emotion/styled\";\n\nexport const ImageStyled = s.img `\n    width: 200px;\n    heigth: 200px;\n`","import { useEffect, useState } from 'react';\nimport { Link, useParams, Outlet, useNavigate } from 'react-router-dom';\nimport { fetchMovieDetailsApi } from 'services/moviesApi';\nimport { ImageStyled } from './MovieDetails.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n    const navigate = useNavigate();\n  const handleClick = () => {\n    navigate('/movies', { state: { query: '' } });\n  };\n    const [movieDetails, setMovieDetails] = useState([]);\n      const [loader, setLoader] = useState(false);\n  const { id } = useParams();\n    useEffect(() => {\n      const fetchMovieDetails = async () => {\n        setLoader(true);\n        try {\n          const data = await fetchMovieDetailsApi(id);\n          setMovieDetails(data);\n        } catch (error) {\n          console.log('Error fetching movie details:', error);\n        }\n        finally {\n          setLoader(false)\n        }\n    };\n    fetchMovieDetails();\n    }, [id]);\n\n \n  const poster = `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`;\n    return (\n        <div>\n            {loader && <Loader />}\n    <div key={id}>\n      <button onClick={handleClick}>Go back</button>\n      <aside>\n        <ImageStyled src={poster} alt={movieDetails.title} />\n      </aside>\n      <h2>{movieDetails.title}</h2>\n      <p>User scrore: {Math.round(movieDetails.vote_average*10)}%</p>\n      <h3>Overview</h3>\n      <p>{movieDetails.overview}</p>\n      <h4>Genres</h4>{ movieDetails.genres && movieDetails.genres.map(genre => <p key={genre.id}>{genre.name}</p>)}  \n      </div>\n            <div>\n                <h5>Additional information</h5>\n                <ul>\n                    <li><Link to=\"cast\">Cast</Link></li>\n                    <li><Link to=\"reviews\">Reviews</Link></li>\n                </ul>\n                    <Outlet/>\n            </div>\n        </div>\n  );\n};\nexport default MovieDetails;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0899cb23c3aa3793d7d2c78c362ea8dc';\n\nexport const fetchTrendingMoviesApi = async () => {\n  try {\n    const response = await axios.get('/trending/all/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchKeyMoviesApi = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetailsApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCastApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviewsApi = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["ImageStyled","s","navigate","useNavigate","useState","movieDetails","setMovieDetails","loader","setLoader","id","useParams","useEffect","fetchMovieDetails","fetchMovieDetailsApi","data","console","log","poster","poster_path","Loader","onClick","state","query","src","alt","title","Math","round","vote_average","overview","genres","map","genre","name","to","axios","API_KEY","fetchTrendingMoviesApi","params","api_key","response","results","fetchKeyMoviesApi","fetchMovieCastApi","fetchMovieReviewsApi"],"sourceRoot":""}